version: '3.8'

services:
  # Mobile Backend API
  mobile-backend:
    build: .
    container_name: road-status-mobile-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - SECRET_KEY=dev-secret-key-change-in-production
      - DATABASE_URL=db/road_status.db
      - DEBUG=true
    volumes:
      - ./db:/app/db
      - ./uploads:/app/uploads
      - .:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (for production)
  postgres:
    image: postgres:13
    container_name: road-status-db
    environment:
      - POSTGRES_DB=road_status
      - POSTGRES_USER=road_user
      - POSTGRES_PASSWORD=road_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    profiles:
      - production

  # Redis Cache (for production)
  redis:
    image: redis:6-alpine
    container_name: road-status-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles:
      - production

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: road-status-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - mobile-backend
    restart: unless-stopped
    profiles:
      - production

  # Monitoring Stack (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: road-status-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: road-status-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: road-status-network 